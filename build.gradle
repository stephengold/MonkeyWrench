// Gradle script to build the MonkeyWrench project

plugins {
    id 'base' // to add a "clean" task to the root project
}

ext {
    wrenchSnapshot = '-SNAPSHOT' // for development builds
    //wrenchSnapshot = '' // for release builds

    jmeTarget = '' // distinguish non-JME libraries built for specific JME releases

    // module coordinates of external dependencies:
    acorusCoordinates = 'com.github.stephengold:Acorus:2.0.0'
    heartCoordinates = 'com.github.stephengold:Heart:9.0.0'
    wesCoordinates = 'com.github.stephengold:Wes:0.8.1'

    // production versions of libraries:
    gsonCoordinates = 'com.google.code.gson:gson:2.9.1'
    imageioVersion = '3.10.1'
    //jme3Version = '3.6.1-stable'
    //lwjglVersion = '3.3.2'

    // advanced versions of libraries:
    //gsonCoordinates = 'com.google.code.gson:gson:2.10.1'
    jme3Version = '3.7.0-alpha3.1'
    lwjglVersion = '3.3.3'
    //lwjglVersion = '3.3.4-SNAPSHOT'

    wrenchVersion = '0.6.1' + jmeTarget
}

subprojects {
    apply from: rootProject.file('common.gradle')
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds' // to disable caching of snapshots
}

tasks.register('checkstyle') {
    dependsOn ':apps:checkstyleMain', ':lib:checkstyleMain'
    description 'Checks the style of all Java sourcecode.'
}

// Register publishing tasks:

tasks.register('install') {
    dependsOn ':lib:install'
    description 'Installs Maven artifacts to the local repository.'
}
tasks.register('release') {
    dependsOn ':lib:release'
    description 'Stages Maven artifacts to Sonatype OSSRH.'
}

// Register cleanup tasks:

tasks.register('cleanDownloads', Delete) { // downloaded assets
    delete 'downloads'
}

// Register downloading tasks:

tasks.register('bistro', MyDownload) {
    sourceUrl = 'https://developer.nvidia.com/bistro'
    target = file('downloads/Bistro_v5_2.zip')
}
tasks.register('downloads') {
    dependsOn 'testdata-31', 'testdata-36'
}
tasks.register('testdata-31', MyDownload) {
    sourceUrl = 'https://repo1.maven.org/maven2/org/jmonkeyengine/jme3-testdata/3.1.0-stable/jme3-testdata-3.1.0-stable.jar'
    target = file('downloads/jme3-testdata-3.1.0-stable.jar')
}
tasks.register('testdata-36', MyDownload) {
    sourceUrl = 'https://repo1.maven.org/maven2/org/jmonkeyengine/jme3-testdata/3.6.1-stable/jme3-testdata-3.6.1-stable.jar'
    target = file('downloads/jme3-testdata-3.6.1-stable.jar')
}

// helper class to wrap the Ant download task:

class MyDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
        println sourceUrl
    }
}
